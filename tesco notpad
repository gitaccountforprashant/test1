#!/bin/bash
sed -i "s#url.*#url('$projurl')#" dslscripts/fetchcode.groovy
sed -i "s#branch.*#branch('$branch')#" dslscripts/fetchcode.groovy

.....................
create sample CD pipeline (echo step only)
create CD pipeline for sample java project with maven commands

write dsls for sample CD pipeline (echo step only)
write dsls for CD pipeline for sample java project with maven commands
create cd pipeline view dsl for cd pipeline jobs

editing dls with parameters like job-idetifier,branch,git url
generate CD pipeline jobs using dsls through a separate job(jobs-generator)

running CD pipeline and testing with differant parameters

#docker matser image
create a basic dockerfile for jenkins
create jobs-generator groovy file for jobs-generator job
incorporate jobs-generator groovy file in dockerfile
test jobs-generator job with jenkins master container

create adminaccount.groovy file 
incorporate adminaccount.groovy file in dockerfile
test jenikins container with default user and password

make changes in dockerfile for userid and password as enviornment variable in dockerfile
make changes in adminaccount.groovy for userid and password as enviornment variable
run a jenkins container with non-default userid and password
test by logiing in jenkins container with non-default userid and password

create git-user.groovy file 
incorporate git.groovy file in dockerfile
test jenikins container with default git-user and password

make changes in dockerfile for git-user and password as enviornment variable in dockerfile
make changes in git-user.groovy for git-user and password as enviornment variable
run a jenkins container with non-default git-user and password
test by cloning sample project in jenkins container with non-default git-user and password

create xml for maven download on demand for cd jobs
incoporate maven xml in dockerfile
test jenkins container with new built image

identify default plugins and required plugins for jenkins container
create plugins.txt which includes plugins with version
incorporate in dockerfile and run a container with list of plugins and test.

#docker slave image for java
identify base image for jenkins java slave
create a dockerfile for jenkins java slave
crate image of jenkins java slave and test its container
run CD pipeline with jenkins java slave container

#terraform pipeline for infrasrtructure
create sample terraform pipeline for infrasrtructure(echo steps)
craete terraform pipeline for infrasrtructure with real tf commands
test terraform pipeline and rectify errors
enhance tf pipeline for taking parameters and overriding pipeline jobs parameters
test tf pipeline for pipeline jobs parameters
create dsls for tf pipeline
create terraform view dsl for tf pipeline jobs

# create job for dockerbuild and publish jenkins master image
create job dsl for dockerbuild and publish jenkins master image
# create job for dockerbuild and publish jenkins java slave image
create job dsl for dockerbuild and publish jenkins java slave image
# create job for dockerbuild and publish jenkins nodejs slave image
create job dsl for dockerbuild and publish jenkins nodejs slave image

# create chef rubocop job for static code analysis of chef code
create dsl for rubocop job for static code analysis of chef code
edit job dsl for generating report of static code analysis of chef code and show on dashboard

# create jobs-generator job for tf pipeline,chef rubocop,jenkins master and slaves image generator jobs
Create jobs-generator.groovy to generate jobs-generator in jenkins for local team usage

#dokcer jenkins image for local team
create dockerfile for jenkins image for local team
incoroprate jobs-generator.groovy in dockerfile for jenkins image for local team
incoporate adminaccount.groovy in dockerfile for jenkins image for local team
identify dependencies for all required jobs in jenkins image for local team
incoporate dependencies in dockerfile for jenkins image for local team
incorporate git.groovy file in dockerfile for jenkins image for local team
run a container and test by running all jobs generated by jobs-generator job
identify default plugins and required plugins for jenkins container
create plugins.txt which includes plugins with version

#create a separate job for building dokcer jenkins image for local team and push to ecr
create a dsl for job for building dokcer jenkins image for local team and push to ecr

#make chagnges in sts script written by sreenath
create job dsl for sts-key-generator
incoroprate sts-key-generator job in tf pipeline,run and test tf pipeline

#make script for automatically adding jenkins pub key to git account using git api

#deploy jenkins master on kubernetes cluster
configure jenkins master for kubernetes slaves
run java cd pipeline on kubernetes slaves
make changes in jenkins java slave dockerfile for kubernetes things



###future tasks

deploy sample java project on kubernetes cluster

create CD pipeline for nodejs project
create dsls for CD pipeline jobs for nodejs project
deploy sample node js project on kubernetes cluster

#break tf pipeline for preprod and prod (being docne by sreenath)

.........................................


a=('nn' 'nn' 'gg' 'kk' 'gg')
b=()
for i in ${a[@]}
do
if !(echo ${b[@]} | grep -q -w $i)
then
b=("${b[@]}" "$i")
fi
done
echo ${b[@]}

for j in ${b[@]}
		x=0
        do
        for k in ${a[@]}
                do
                if [ $j == $k ]
                        then
                        x=$x+1
                fi
                done
        echo $j.......... $x
        done

touch b.txt
for i in $(cat a.txt);do
	if !(cat b.txt| grep -qw $i);then
		echo $i>>b.txt
	fi
	done
for j in $(cat b.txt);do
	echo $j ....$(cat a.txt| grep -c $j)
	done
rm b.txt


echo $x|awk -F: '{for i in NF;do print $3;done}'

n=$(wc -l<a)
x=1
while [ $x < $n ];do
	echo $(head $x a|tail -1) : $(head -$x b|tail -1)
	x=$(($x+1))
done

a()
for i in $(cat a);do
	a=("${a[@]}" "$i")
echo ${a[@]}
# write script for deployment
m1=$(date | awk '{print $4}'|awk -F: '{print $(NF-1)}')
s1=$(date | awk '{print $4}'|awk -F: '{print $(NF)}')
echo -n enter:; $(read x)
x="liber"
l=()
for i in $(cat onlyci);do if echo $i|grep -i $x;then l=("${l[@]}" "$i");fi;done
echo ${l[@]}
n=1;for j in ${l[@]};do if echo $j|grep -q Main_;then echo -n $n......;echo $j|awk -F\\ '{print $NF}';elif echo $j|grep -q Rel_;then echo -ne '\t'$n.......;echo $j|awk -F\\ '{print $NF}';fi;n=$((n+1));done
echo -n OPTION:;read y
echo $(($y-1))
o=${l[$(($y-1))]}
echo $o
z="$o/$(ls -t $o|head -1)/$(ls "$o/$(ls -t $o|head -1)"|grep msi)"
cp $z $o/a




touch wel;s="";for i in $(echo "welcome to india");do if !(echo $i|grep -q " ");then s=$(($s+$i));else echo $s>>wel;s="";fi;done;cat wel

a=();for i in $(echo "welcome to india");do a=("${a[@]}" "$i");done
k=0;for i in ${a[@]};do echo -n ${a[$((${#a[@]}-$k-1))]};k=$(($k+1));done

a=();s="";x="abc:de:f"":"   ;z=${#x};i=0;while [ $z -gt 0 ];do if !(echo ${x:$i:1}|grep ":");then s=$s${x:$i:1};else a=("${a[@]}" "$s");s="";fi; i=$(($i+1));z=$(($z-1)) ;done;echo ${a[@]}



	if !(cat log| grep -qw "errors") ;then
		echo hiii 
	fi

if [ !( cat log | grep -qw "errors" ) -o ( cat log | grep -qw '"message": "key is already in use"' ) ];then
		echo hiii 
	fi



if !( cat log | grep -qw "errors") || ( cat log | grep -qw '"message": "key is already in use"' );then
		echo hiii 
		else
			exit 1
		
	fi


#!/bin/bash	
a=5
if !( cat log | grep -qw "errors") || ( $a == 7 ) ;then
		echo hiii 
	fi
	
	
'curl -H "Authorization: token '$t'''"  -X POST --header "Content-Type:application/json" --data '{ "title": "'''$n'''", "key": "'''$k'''"}' https://github.dev.global.tesco.org/api/v3/user/keys > log'''
if !( cat log | grep -qw "errors") || ( cat log | grep -qw '"message": "key is already in use"' );then
		cat log 
		else
        	cat log
			exit 1
		
	fi

'curl -H "Authorization: token '$t'''"  -X POST --header "Content-Type:application/json" --data '{ "title": "'''$n'''", "key": "'''$k'''"}' https://github.dev.global.tesco.org/api/v3/user/keys > log'''

curl -H "Authorization: token x_token"  -X POST --header "Content-Type:application/json" --data '{ "title": "x_name", "key": "x_key"}' https://github.dev.global.tesco.org/api/v3/user/keys


sed -i "s#x_token#$x_token#" q
sed -i "s#x_name#$x_name#" q
sed -i "s#x_key#$x_key#" q

...............

curl -H Authorization: token 8b03d00911a7590c2075afbf9dccdc695e3e1dd4 -X POST --header Content-Type:application/json --data { "title": "sandy", "key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCqFARpoxofgFArXJ7WWowS440gZ2gXhbEDk/Op/D9ZdOx9Q+rAbCyhswg+7AzgDRQVaLJlofGXW48JSMLjr8A8c6yClPal6XPwfpTDE4IFiBikDLTnr9s3YK/14U/xbOKcLlbfvdgcETjvsXniR/P6Se+tf/pOmDOKW0y3yNxCwoNvNhI8ol1NQH7ospCRCOLZPoWw6ShipPqQ3TQtS3xuY4Xaq+zaK17NaJo3lhyYXy/6e2b4RCYSxbxzXa9fP82siORYf1ahwi69TRyfQwaqiN+Wm9stUSBXGspsJz4EJG/LsRAsWdy/i/ralhBtpSTYIvLLvFp4tY7f0nxA7i5l jenkins@11f0bd78afdb"} https://github.dev.global.tesco.org/api/v3/user/keys


curl -H \"Authorization: token x_token\"  -X POST --header \"Content-Type:application/json\" --data \'{ \"title\": \"x_name\", \"key\": \"x_key\"}\' https://github.dev.global.tesco.org/api/v3/user/keys


#!/bin/bash

# below function will generate pub_key of jenkins container using github api and add to git user's gitgub account

function key_generation() {
access_token=$1
key_name=$2


if [ ! \( -f ${JENKINS_HOME}/.ssh/id_rsa.pub \) ] ;then
	cat /dev/zero | ssh-keygen -t rsa -q -N ""
fi

echo StrictHostKeyChecking no > $JENKINS_HOME/.ssh/config

echo curl -H \"Authorization: token access_token\"  -X POST --header \"Content-Type:application/json\" --data \'{ \"title\": \"key_name\", \"key\": \"pub_key\"}\' https://github.dev.global.tesco.org/api/v3/user/keys > curl_cmd.sh

pub_key=$(cat $JENKINS_HOME/.ssh/id_rsa.pub)

sed -i "s#access_token#$access_token#" curl_cmd.sh
sed -i "s#key_name#$key_name#" curl_cmd.sh
sed -i "s#pub_key#$pub_key#" curl_cmd.sh

chmod +x curl_cmd.sh
source curl_cmd.sh > log

if !( cat log | grep -q '"message"') || ( cat log | grep -qw '"message": "key is already in use"' );then
	cat log
else
    cat log
	exit 1
fi

}

#####################

#!/bin/bash

function generate_sts_creds() {
PRE_PROD_APP_VPC_OWNER_ID=$1
CMD="$@"

#setting role details
ASSUME_ROLE="arn:aws:iam::${PRE_PROD_APP_VPC_OWNER_ID}:role/sts-demo-role"
ROLE_SESSION_NAME="sts-role-session"
STS_CREDENTIALS_FILE="sts_credentials"

#generating temp tokken with aws sts
aws sts assume-role --output json --role-arn ${ASSUME_ROLE} --role-session-name ${ROLE_SESSION_NAME} > ${STS_CREDENTIALS_FILE}

ACCESS_KEY=$(cat ${STS_CREDENTIALS_FILE} | jq -r ".Credentials.AccessKeyId")
SECRET_KEY=$(cat ${STS_CREDENTIALS_FILE} | jq -r ".Credentials.SecretAccessKey")
SESSION_TOKEN=$(cat ${STS_CREDENTIALS_FILE} | jq -r ".Credentials.SessionToken")
EXPIRATION=$(cat ${STS_CREDENTIALS_FILE} | jq -r ".Credentials.Expiration")
# print the temp-session details
echo "Retrieved temp access key ${ACCESS_KEY} for role ${ASSUME_ROLE}. Key will expire at ${EXPIRATION}"
#Putting temporary credentials in environment variables
echo export AWS_ACCESS_KEY_ID=${ACCESS_KEY} > aws_sts.sh
echo export AWS_SECRET_ACCESS_KEY=${SECRET_KEY} >> aws_sts.sh
echo export AWS_SESSION_TOKEN=${SESSION_TOKEN} ${CMD} >> aws_sts.sh

}


########################

sudo apt-get update
wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update
sudo apt-get install -y jenkins
sudo service jenkins start
sudo cat /var/lib/jenkins/secrets/initialAdminPassword


sudo apt-get update
sudo apt-key adv \
               --keyserver hkp://ha.pool.sks-keyservers.net:80 \
               --recv-keys 58118E89F3A912897C070ADBF76221572C52609D

echo 'deb https://apt.dockerproject.org/repo ubuntu-trusty main' | sudo tee /etc/apt/sources.list.d/docker.list
sudo apt-get update
sudo apt-get install -y docker-engine
sudo usermod -aG docker jenkins
sudo service jenkins restart

sudo su    
visudo -f /etc/sudoers
add add following line at the end.

jenkins ALL= NOPASSWD: ALL

#logout and relogin
#add credential for git





#aws-cli
#curl -O https://bootstrap.pypa.io/get-pip.py
#sudo /usr/bin/python2.7 get-pip.py
#pip install awscli





apt-add-repository ppa:brightbox/ruby-ng
apt-get update
apt-get install ruby2.2
sudo apt-get install bundler

wget https://packages.chef.io/files/stable/chefdk/1.1.16/ubuntu/14.04/chefdk_1.1.16-1_amd64.deb
sudo dpkg -i chefdk_1.1.16-1_amd64.deb


 wget https://releases.hashicorp.com/terraform/0.8.2/terraform_0.8.2_linux_amd64.zip
 apt-get install zip
 unzip terraform_0.8.2_linux_amd64.zip -d /usr/bin/

job-dsl
docker-build-publish
build-flow-plugin
#aws-credentials
aws ecr plugin
checkstyle
htmlpublisher
warnings




 
 ssh-keygen
 
 
 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCd6j6wP49bzLV9MlQKNOGmuFrfGbOEoUxkNCNqdCZqRAfcRtJgZM7971T94LcBKxyt0mU3R2v5IGUcAS0pOR+KtuFiA8p4lhitjlGGPp4mn9E30KIZyVRNAB48R/IRFR0O0ON+M2jDeFyWg35gahKoD+6iy2FV82hXQfGbYIk4M0oXeZeAgc2/yqdY/q07aRqqqUJXqKLzhkOnldNkG2TyyL9ccrdw8YpQ68TR+jSQ625ncIKFHJVXr0WRzewXrhk5ylXICgNrCoDZDnw7cG/548sBnA58UuIwT9XQOzl7zZebHhHHYL04Tg+K9MlRoV+X8uJwn3b7JI6+023vvX5d sandeeprawat@xeadmins-MacBook-Pro-3.local

 

dsl/chef-code-analysis/*.groovy
dsl/infra-manager/*.groovy
dsl/ecr-repo-creator/*.groovy
dsl/jenkins-java-slave/*.groovy
dsl/jenkins-master/*.groovy
dsl/jenkins-master-slave-view/*.groovy
dsl/jenkins-nodejs-slave/*.groovy


ubuntu@35.164.168.205
docker run -dp 8080:8080 -e jenkins-user="xyz" -e  jenkins-password="xyz" 834873887160.dkr.ecr.eu-west-1.amazonaws.com/docrates/jenkins-master

docker run -d 834873887160.dkr.ecr.eu-west-1.amazonaws.com/docrates/jenkins-java-slave


35.166.233.57....for demo3 111


set-up-jenkins/dsl/jenkins-setup/*.groovy





FROM evarga/jenkins-slave

USER root

RUN apt-get -q update && apt-get -yq install git openjdk-7-jdk wget jq

RUN wget https://get.docker.com/builds/Linux/x86_64/docker-latest.tgz && \
        tar -xvzf docker-latest.tgz && \
        mv docker/docker /usr/bin/
RUN curl -O https://bootstrap.pypa.io/get-pip.py
RUN sudo /usr/bin/python2.7 get-pip.py
RUN pip install awscli   

      
RUN mkdir -p /var/slave-home && chown -R jenkins /var/slave-home



#########


import com.cloudbees.plugins.credentials.impl.*;
import com.cloudbees.plugins.credentials.*;
import com.cloudbees.plugins.credentials.domains.*;

def env = System.getenv()
Credentials c = (Credentials) new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL, "credential-id-to-clone-code", "", env['git_user'], env['git_token'])

SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), c)



###################



FROM evarga/jenkins-slave

USER root

RUN apt-get -q update && apt-get -yq install git openjdk-7-jdk
RUN mkdir -p /var/slave-home && chown -R jenkins /var/slave-home


###########
f=open("test","r")
for i in f.readlines():
	x=i.split(",").rstrip("\n")
	print x[1]+":latest"
f.close()
#############


yello sticky note


docker ps -as    size of container

docker ps -aq
docker rm -f $(docker ps -a -q)
prashant.sharma@in.tesco.com


docker images --digest
docker history
8032466944
docker top containerid
sed -i "s#projname#$project_name#" java/pipeline/pipeline.groovy
sed 's#data:image/svg+xml.*)#"https://github.dev.global.tesco.org/raw/gkl6/Images/master/title.png?token=AAALBlCKsxwBBTkTcoF0bEWp36Kw7konks5Ypb-MwA%3D%3D")#' a.txt
sed 's#data:image/svg+xml.*)#"https://github.dev.global.tesco.org/raw/gkl6/Images/master/title.png?token=AAALBlCKsxwBBTkTcoF0bEWp36Kw7konks5Ypb-MwA%3D%3D")#' a.txt

docker network ls
35.163.193.143
10.0.1.32
http://afonsof.com/jenkins-material-theme/dist/material-teal.css
http://52.213.38.250:8083/jenkins/userContent/sample.css
dkm password: Samsung123
export KUBERNETES_PROVIDER=aws; wget -q -O - https://get.k8s.io | bash
834873887160

 
AKIAIFYXTBOPM4OJCX7A
ML/tGgX9xq38lW2hX4eNaf+ehPO82ahpicJK3Z5B	ML/tGgX9xq38lW2hX4eNaf+ehPO82ahpicJK3Z5B	834873887160		8b03d00911a7590c2075afbf9dccdc695e3e1dd4		 
wget https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes.tar.gz - See more at: http://www.tothenew.com/blog/setup-kubernetes-cluster-on-aws-ec2/#sthash.IfagxOPp.dpuf
09291140028410
9971366027

https://dzone.com/refcardz/continuous-delivery-with-jenkins-workflow
http://container-solutions.com/running-docker-in-jenkins-in-docker/
http://container-solutions.com/continuous-delivery-with-docker-on-mesos-in-less-than-a-minute/

http://bencane.com/2013/07/22/ssh-disable-host-checking-for-scripts-automation/
8b03d00911a7590c2075afbf9dccdc695e3e1dd4
cat /dev/zero | ssh-keygen -t rsa -q -N ""

http://www.stuartellis.name/articles/jenkins-pipeline/
git checkout -b aNewBranch SHA1
pluralsight- xebia@321

tcp://34.251.132.162:2376
https://github.dev.global.tesco.org/aurora/Spring3HibernateApp.git
i-0fa0c850f8930c5f4
34.249.28.75

TICKET: UK/ETKT 228 1251123751 FOR SHARMA/PRASHANT MR

http://172.20.1.150:8080
10.0.1.231





 








